% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/optimr.R, R/sampler.R
\name{optimr,bdm-method}
\alias{optimr,bdm-method}
\alias{sampler}
\alias{sampler,bdm-method}
\title{Fit \code{bdm} model}
\usage{
\S4method{optimr}{bdm}(object, data = list(), run = character(), init = "random", ...)

sampler(object, ...)

\S4method{sampler}{bdm}(
  object,
  data = list(),
  run = character(),
  init = "random",
  chains,
  iter,
  warmup,
  thin,
  ...
)
}
\arguments{
\item{object}{a \code{bdm} model object}

\item{data}{a \code{list} object containing the model inputs}

\item{run}{optional character vector to label the run}

\item{init}{an initialisation \code{list}, \code{function} or \code{character} string}

\item{...}{further arguments to \code{\link[rstan:sampling]{sampling}}}

\item{chains}{number of MCMC chains}

\item{iter}{number of iterations per chain}

\item{warmup}{number of iterations to be discarded}

\item{thin}{sampling interval from chains}
}
\value{
Returns a \code{bdm} object containing posterior samples contained in \code{object@trace}.
}
\description{
Execute a Bayesian model fit using \pkg{rstan}.
}
\details{
By default a Bayesian fit is executed through a call to \code{\link[rstan:sampling]{sampling}}, which implements an MCMC algorithm. Default values for \code{chains}, \code{iter}, \code{warmup} and \code{thin} follow those for \pkg{rstan}.

The \code{init} argument can be a \code{list}, \code{function} or \code{character} string. If it is a function then it should take no arguments and return a named list of intial values for the estimated parameters. Alternatively the list can be specified directly.
This behaviour matches that for \code{\link[rstan:sampling]{sampling}}. If a character string is supplied it should be either \code{'random'} or \code{'fixed'}. 
If the model is the default model and \code{init = 'fixed'} then sensible starting values for \code{r}, \code{logK} and \code{x} are produced using \code{\link{getr}}, \code{\link{getlogK}} and \code{\link{getx}}. 
If the model is the default model and \code{init = 'random'} then sensible starting values are obtained by sampling from the priors for \code{r, logK, x}.
If the model is not the default model, then the user should specify a function or list, otherwise starting values will be randomly generated by \code{\link[rstan:sampling]{sampling(init = 'random', ...)}}.
}
\examples{
# get some data
data(albio)
dat <- bdmData(harvest = albio$catch, index = albio$cpue, time = rownames(albio))

# initialize and fit default model
\dontrun{
mdl <- bdm()
mdl <- compiler(mdl)
mdl <- sampler(mdl, dat)
}

}
